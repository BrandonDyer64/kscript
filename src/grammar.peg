{
  const tv = (t, v) => ({t,v});
  const ast = false;
}

file
  = prog:program { return 'let _={};\n' + prog }

program
  = lines:line* { return ast ? lines : lines.join('\n') }

line
  = scope:scope { return scope }
  / '\n'* _ op:operation? _ dotype:dotype? _ val:expression _ ('\n'/';') _ '\n'* _
    { return ast
      ? tv("line", {op, dotype, val})
      : (
        (op=='<' || op==null ? '_'+(dotype||'')+'=' : '')
        + val
        + (op=='>' || op==null ? '(_'+(dotype||'')+')': '')
        + ';'
      ) }

operation
  = op:("<" / ";" / ">") { return op }

dotype
  = "." val:[a-zA-Z.]* { return '.' + val.join('') }

expression
  = factors:(_ factor _)+ { return ast ? factors.map(e=>e[1]) : factors.map(e=>e[1]).join(' ') }

factor
  = jsFun
  / fun
  / object
  / ifStatement
  / assignment
  / rawJS
  / "(" _ expr:expression _ ")" { return '(' + expr + ')' }
  / literal
  / mathop
  / varName
  / '{' _ '}' { return '{}' }
  / '(' _ ')' { return '()' }
  / scope:scope { return '(_=>{\n' + scope + '\n;return _;})' }

varName
  = [a-zA-Z_$.][a-zA-Z0-9_$.]* {return text()}

mathop
  = ('=='/'++'/[\+\-\*\/\%,])

scope
  = "{" _ "\n"* _ program:program _ '\n'* _ "}" { return ast
    ? tv("scope", program)
    : program }

fun
  = args:argList _ "->" _ scope:factor { return ast
    ? tv("jsFun", {args, scope})
    : '(' + args + ")=>" + scope }

jsFun
  = args:argList _ "=>" _ scope:scope { return ast
    ? tv("jsFun", {args, scope})
    : '(' + args + ")=>{let _={};" + scope + '}' }

argList
  = "(" params:[a-zA-Z_$, =0-9]* ")" { return params.join('') }

assignment
  = type:("let "/"var ")? _ name:varName _ "=" _ expr:expression { return ast
    ? tv("assignment", { type:type?type.trim():null, name, expr } )
    : ((type||'').replace('let','const') + name + ' = ' + expr)}

ifStatement
  = cond:('if' _ '(' _ expression _ ')') _ statement:line _ els:('else' _ line)? { return ast
  ? ''
  : ('((' + cond[4] + ') ? (_=>{' + statement + ';return _;}) : ' + (els ? '(_=>{' + els[2] + ';return _;})' : '(_=>(_))') + ')')}

literal
  = number
  / string

number
  = [0-9]+ { return text() }

string
  = "'" ("\\'"/[^'])* "'" { return text() }

_ "whitespace"
  = [ \t\r]*

object
  = 'obj{' _ '\n'* _ pairs:(kvpair)* _ '\n'* '}' { return '{' + pairs.join(',') + '}' }

kvpair
  = name:varName _ ':' _ value:expression _ (';'/'\n')? _ '\n'* _ {return name + ':' + value }

rawJS
  = 'js' _ '{' + inner:innerRawJS + '}' { return inner }

innerRawJS
  = [^{}]+ ('{' innerRawJS '}' innerRawJS*)* { return text() }
